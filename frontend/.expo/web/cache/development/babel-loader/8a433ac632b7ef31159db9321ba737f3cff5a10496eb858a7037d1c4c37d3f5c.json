{"ast":null,"code":"import AsyncStorage from \"@react-native-async-storage/async-storage\";\nconst API_URL = process.env.API_URL || \"http://localhost:5000/api\";\nexport async function loginUser(username, password) {\n  const res = await fetch(`${API_URL}/auth/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  const data = await res.json();\n  if (data.access_token) {\n    await AsyncStorage.setItem(\"token\", data.access_token);\n    return data.access_token;\n  }\n  return null;\n}\nexport async function getOracleInsights(prompt) {\n  const token = await AsyncStorage.getItem(\"token\");\n  const res = await fetch(`${API_URL}/oracle/insights`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      prompt\n    })\n  });\n  return await res.json();\n}\nexport async function fetchScrolls() {\n  const res = await fetch(`${API_URL}/scrolls`);\n  return await res.json();\n}\nexport async function uploadMemory(content) {\n  const token = await AsyncStorage.getItem(\"token\");\n  await fetch(`${API_URL}/vault/upload`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      content\n    })\n  });\n}\nexport async function downloadMemory(id) {\n  const token = await AsyncStorage.getItem(\"token\");\n  const res = await fetch(`${API_URL}/vault/download/${id}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return await res.json();\n}","map":{"version":3,"names":["AsyncStorage","API_URL","process","env","loginUser","username","password","res","fetch","method","headers","body","JSON","stringify","data","json","access_token","setItem","getOracleInsights","prompt","token","getItem","Authorization","fetchScrolls","uploadMemory","content","downloadMemory","id"],"sources":["/workspaces/Aetherion_updates/frontend/services/api.js"],"sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst API_URL = process.env.API_URL || \"http://localhost:5000/api\";\n\nexport async function loginUser(username, password) {\n  const res = await fetch(`${API_URL}/auth/login`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ username, password })\n  });\n  const data = await res.json();\n  if (data.access_token) {\n    await AsyncStorage.setItem(\"token\", data.access_token);\n    return data.access_token;\n  }\n  return null;\n}\n\nexport async function getOracleInsights(prompt) {\n  const token = await AsyncStorage.getItem(\"token\");\n  const res = await fetch(`${API_URL}/oracle/insights`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({ prompt })\n  });\n  return await res.json();\n}\n\nexport async function fetchScrolls() {\n  const res = await fetch(`${API_URL}/scrolls`);\n  return await res.json();\n}\n\nexport async function uploadMemory(content) {\n  const token = await AsyncStorage.getItem(\"token\");\n  await fetch(`${API_URL}/vault/upload`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({ content })\n  });\n}\n\nexport async function downloadMemory(id) {\n  const token = await AsyncStorage.getItem(\"token\");\n  const res = await fetch(`${API_URL}/vault/download/${id}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return await res.json();\n}\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,2CAA2C;AAEpE,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACF,OAAO,IAAI,2BAA2B;AAElE,OAAO,eAAeG,SAASA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EAClD,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,aAAa,EAAE;IAC/CQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,QAAQ;MAAEC;IAAS,CAAC;EAC7C,CAAC,CAAC;EACF,MAAMQ,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,CAAC;EAC7B,IAAID,IAAI,CAACE,YAAY,EAAE;IACrB,MAAMhB,YAAY,CAACiB,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACE,YAAY,CAAC;IACtD,OAAOF,IAAI,CAACE,YAAY;EAC1B;EACA,OAAO,IAAI;AACb;AAEA,OAAO,eAAeE,iBAAiBA,CAACC,MAAM,EAAE;EAC9C,MAAMC,KAAK,GAAG,MAAMpB,YAAY,CAACqB,OAAO,CAAC,OAAO,CAAC;EACjD,MAAMd,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,kBAAkB,EAAE;IACpDQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCY,aAAa,EAAE,UAAUF,KAAK;IAChC,CAAC;IACDT,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEM;IAAO,CAAC;EACjC,CAAC,CAAC;EACF,OAAO,MAAMZ,GAAG,CAACQ,IAAI,CAAC,CAAC;AACzB;AAEA,OAAO,eAAeQ,YAAYA,CAAA,EAAG;EACnC,MAAMhB,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,UAAU,CAAC;EAC7C,OAAO,MAAMM,GAAG,CAACQ,IAAI,CAAC,CAAC;AACzB;AAEA,OAAO,eAAeS,YAAYA,CAACC,OAAO,EAAE;EAC1C,MAAML,KAAK,GAAG,MAAMpB,YAAY,CAACqB,OAAO,CAAC,OAAO,CAAC;EACjD,MAAMb,KAAK,CAAC,GAAGP,OAAO,eAAe,EAAE;IACrCQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCY,aAAa,EAAE,UAAUF,KAAK;IAChC,CAAC;IACDT,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEY;IAAQ,CAAC;EAClC,CAAC,CAAC;AACJ;AAEA,OAAO,eAAeC,cAAcA,CAACC,EAAE,EAAE;EACvC,MAAMP,KAAK,GAAG,MAAMpB,YAAY,CAACqB,OAAO,CAAC,OAAO,CAAC;EACjD,MAAMd,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,mBAAmB0B,EAAE,EAAE,EAAE;IACzDlB,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACPY,aAAa,EAAE,UAAUF,KAAK;IAChC;EACF,CAAC,CAAC;EACF,OAAO,MAAMb,GAAG,CAACQ,IAAI,CAAC,CAAC;AACzB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}